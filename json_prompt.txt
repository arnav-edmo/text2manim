CRITICAL RULES FOR JSON STRUCTURE:
1. All numeric values must be plain numbers (e.g., 5 not "5")
2. All coordinates must be arrays of numbers (e.g., [0, 0, 0] not "[0, 0, 0]")
3. Function calls must be strings (e.g., "get_square_vertices([0, 0, 0], 5, 0)")
4. Do not add any explanatory text after the JSON
5. The JSON must be valid and complete
6. Do NOT use BLACK color for any shape
7. For derived calculations:
   - Square inscribed in circle: side = radius * sqrt(2)
   - Circle inscribed in square: radius = side / 2
   - Semicircle on line: center = midpoint of line, radius = line_length / 2
8. All entity IDs must be unique

NEVER put geometric properties (radius, side_length, etc.) only in entities - they MUST be in positions section for manim code generation.

AVAILABLE GEOMETRIC FUNCTIONS:
1. get_single_tangent_point(circle_center, circle_radius, external_point, side)
2. get_square_vertices(center, side_length, orientation)
3. get_rectangle_vertices(center, length, width, orientation)
4. get_equilateral_triangle_vertices(center, side_length, orientation)
5. get_isosceles_triangle_vertices(center, equal_sides, base, orientation)
6. get_right_triangle_vertices(center, base, height, orientation)
7. get_chord_points(circle_center, circle_radius, distance_from_center)
8. get_inscribed_circle(vertices)
9. get_circumscribed_circle(vertices)

## FEW SHOT EXAMPLES

### EXAMPLE 1: Circle
Input query: Draw a circle of radius 3 cm.

Chain of Thought:
1. Simple circle with radius 3 cm
2. Position at origin for clarity
3. Use green color (avoiding black)
4. MUST include both center AND radius in positions section

JSON Output:
{
  "entities": [
    {"type": "circle", "id": "C1", "color": "BLUE"}
  ],
  "positions": {
    "C1": {
      "center": [0, 0, 0],
      "radius": 3
    }
  }
}

### EXAMPLE 2: Right Triangle
Input query: Draw a right triangle with base 4 cm and height 3 cm.

Chain of Thought:
1. Right triangle with base 4 cm and height 3 cm
2. Right angle at bottom-left corner
3. Hypotenuse = √(4² + 3²) = 5 cm
4. Position at origin for clarity
5. Color: Blue

JSON Output:
{
  "entities": [
    {"type": "polygon", "id": "T1", "sides": 3, "color": "BLUE"}
  ],
  "positions": {
    "T1": {
      "vertices": "get_right_triangle_vertices([0, 0, 0], 4, 3, 0)"
    }
  }
}

### EXAMPLE 3: Isosceles Triangle
Input query: Draw an isosceles triangle with equal sides 5 cm and base 3 cm.

Chain of Thought:
1. Isosceles triangle with two equal sides of 5 cm
2. Base of 3 cm
3. Position at origin
4. Color: Purple

JSON Output:
{
  "entities": [
    {"type": "polygon", "id": "T1", "sides": 3, "color": "PURPLE"}
  ],
  "positions": {
    "T1": {
      "vertices": "get_isosceles_triangle_vertices([0, 0, 0], 5, 3, 0)"
    }
  }
}

### EXAMPLE 4: Square with Triangle on Top
Input query: Draw a square of side 3 cm with a triangle on top.

Chain of Thought:
1. Square with side 3 cm at origin
2. Equilateral triangle on top side of square
3. Triangle base = square side = 3 cm
4. Triangle center positioned above square
5. Colors: Square in blue, triangle in red

JSON Output:
{
  "entities": [
    {"type": "polygon", "id": "S1", "sides": 4, "color": "BLUE"},
    {"type": "polygon", "id": "T1", "sides": 3, "color": "RED"}
  ],
  "relationships": [
    {"type": "adjacent", "shape1": "T1", "shape2": "S1", "side": "top"}
  ],
  "positions": {
    "S1": {
      "vertices": "get_square_vertices([0, 0, 0], 3, 0)"
    },
    "T1": {
      "vertices": "get_equilateral_triangle_vertices([0, 2.6, 0], 3, 0)"
    }
  }
}

### EXAMPLE 5: Circle with Tangents from External Point
Input query: Make a circle of radius 3 cm. Make two tangents of length 5 cm each from point P to the circle.

Chain of Thought:
1. Circle with radius 3 cm at origin
2. External point P from which tangents are drawn
3. Tangent length = 5 cm
4. Distance from P to center = √(tangent² + radius²) = √(25 + 9) = √34 ≈ 5.83 cm
5. Position P at [5.83, 0, 0] for simplicity
6. Two tangent points on circle
7. Colors: Circle in green, tangents in blue, point P in red

JSON Output:
{
  "entities": [
    {"type": "circle", "id": "C1", "color": "GREEN"},
    {"type": "line", "id": "T1", "color": "BLUE"},
    {"type": "line", "id": "T2", "color": "BLUE"},
    {"type": "point", "id": "P1", "color": "RED"}
  ],
  "relationships": [
    {"type": "tangent", "line": "T1", "to": "C1"},
    {"type": "tangent", "line": "T2", "to": "C1"},
    {"type": "passes_through", "line": "T1", "point": "P1"},
    {"type": "passes_through", "line": "T2", "point": "P1"}
  ],
  "positions": {
    "C1": {
      "center": [0, 0, 0],
      "radius": 3
    },
    "P1": {
      "coordinates": [5.83, 0, 0]
    },
    "T1": {
      "endpoints": ["get_single_tangent_point([0, 0, 0], 3, [5.83, 0, 0], 'upper')", "[5.83, 0, 0]"]
    },
    "T2": {
      "endpoints": ["get_single_tangent_point([0, 0, 0], 3, [5.83, 0, 0], 'lower')", "[5.83, 0, 0]"]
    }
  }
}

### EXAMPLE 6: Square Inscribed in Circle
Input query: Make a square inscribed inside a circle.

Chain of Thought:
1. Circle with radius r (assume 4 cm for visualization)
2. Square inscribed means vertices touch the circle
3. Square diagonal = circle diameter = 2r = 8 cm
4. Square side = diagonal/√2 = 8/√2 ≈ 5.657 cm
5. Colors: Circle in green, square in blue

JSON Output:
{
  "entities": [
    {"type": "circle", "id": "C1", "color": "BLUE"},
    {"type": "polygon", "id": "S1", "sides": 4, "color": "RED"}
  ],
  "relationships": [
    {"type": "inscribed", "shape": "S1", "in": "C1"}
  ],
  "positions": {
    "C1": {
      "center": [0, 0, 0],
      "radius": 4
    },
    "S1": {
      "vertices": "get_square_vertices([0, 0, 0], 5.657, 0)"
    }
  }
}

### EXAMPLE 7: Circle with Chord
Input query: Draw a circle of radius 4 cm with a chord 6 cm long.

Chain of Thought:
1. Circle with radius 4 cm at origin
2. Chord of length 6 cm
3. Distance from center to chord = √(radius² - (chord/2)²) = √(16 - 9) = √7 ≈ 2.65 cm
4. Position chord horizontally at distance 2.65 from center
5. Colors: Circle in green, chord in red

JSON Output:
{
  "entities": [
    {"type": "circle", "id": "C1", "color": "BLUE"},
    {"type": "line", "id": "CH1", "color": "RED"}
  ],
  "relationships": [
    {"type": "chord", "line": "CH1", "of": "C1"}
  ],
  "positions": {
    "C1": {
      "center": [0, 0, 0],
      "radius": 4
    },
    "CH1": {
      "endpoints": "get_chord_points([0, 0, 0], 4, 2.65)"
    }
  }
}

### EXAMPLE 8: Equilateral Triangle with Circumscribed Circle
Input query: Draw an equilateral triangle with side 6 cm and its circumscribed circle.

Chain of Thought:
1. Equilateral triangle with side 6 cm
2. Circumscribed circle passes through all vertices
3. Circumradius = side/(√3) = 6/√3 ≈ 3.464 cm
4. Colors: Triangle in red, circle in green

JSON Output:
{
  "entities": [
    {"type": "polygon", "id": "T1", "sides": 3, "color": "RED"},
    {"type": "circle", "id": "C1", "color": "BLUE"}
  ],
  "relationships": [
    {"type": "circumscribed", "circle": "C1", "around": "T1"}
  ],
  "positions": {
    "T1": {
      "vertices": "get_equilateral_triangle_vertices([0, 0, 0], 6, 0)"
    },
    "C1": {
      "center": [0, 0, 0],
      "radius": 3.464
    }
  }
}

## COMPOUND EXAMPLES

### COMPLEX EXAMPLE 1: Square in Circle with External Tangents
Input query: Inscribe a square in a circle of radius 3 cm. Draw two tangents of length 5 cm each from a point P outside the circle.

Chain of Thought:
1. Circle with radius 3 cm at origin
2. Square inscribed: side = 3√2 ≈ 4.243 cm
3. External point P for tangents of length 5 cm
4. Distance from P to center = √(5² + 3²) = √34 ≈ 5.83 cm
5. Position P at [5.83, 0, 0]
6. Two tangent lines from P to circle
7. Colors: Circle in green, square in blue, tangents in red, point P in orange

JSON Output:
{
  "entities": [
    {"type": "circle", "id": "C1", "color": "BLUE"},
    {"type": "polygon", "id": "S1", "sides": 4, "color": "PURPLE"},
    {"type": "line", "id": "T1", "color": "RED"},
    {"type": "line", "id": "T2", "color": "RED"},
    {"type": "point", "id": "P1", "color": "ORANGE"}
  ],
  "relationships": [
    {"type": "inscribed", "shape": "S1", "in": "C1"},
    {"type": "tangent", "line": "T1", "to": "C1"},
    {"type": "tangent", "line": "T2", "to": "C1"},
    {"type": "passes_through", "line": "T1", "point": "P1"},
    {"type": "passes_through", "line": "T2", "point": "P1"}
  ],
  "positions": {
    "C1": {
      "center": [0, 0, 0],
      "radius": 3
    },
    "S1": {
      "vertices": "get_square_vertices([0, 0, 0], 4.243, 0)"
    },
    "P1": {
      "coordinates": [5.83, 0, 0]
    },
    "T1": {
      "endpoints": ["get_single_tangent_point([0, 0, 0], 3, [5.83, 0, 0], 'upper')", "[5.83, 0, 0]"]
    },
    "T2": {
      "endpoints": ["get_single_tangent_point([0, 0, 0], 3, [5.83, 0, 0], 'lower')", "[5.83, 0, 0]"]
    }
  }
}

### COMPLEX EXAMPLE 2: Water Tank with Semicircular Plots
Input query: A square water tank has its side equal to 40 m. There are four semi-circular grassy plots all round it. Find the cost of surfing the plot at Rs.1.25 per square meter.

Chain of Thought:
1. Square tank with side 40 m at origin. We will take this as 3 units so that it fits within manim canvas
2. Four semicircles, one on each side of the square
3. Each semicircle has diameter = square side = 3
4. Each semicircle radius = 1.5
5. Centers of semicircles at midpoints of square sides
6. Colors: Square tank in blue, semicircles in gray

JSON Output:
{
  "entities": [
    {"type": "polygon", "id": "S1", "sides": 3, "color": "BLUE"},
    {"type": "semicircle", "id": "SC1", "color": "GRAY", "orientation": "down"},
    {"type": "semicircle", "id": "SC2", "color": "GRAY", "orientation": "right"},
    {"type": "semicircle", "id": "SC3", "color": "GRAY", "orientation": "up"},
    {"type": "semicircle", "id": "SC4", "color": "GRAY", "orientation": "left"}
  ],
  "relationships": [
    {"type": "attached", "shape": "SC1", "to": "S1", "side": "bottom"},
    {"type": "attached", "shape": "SC2", "to": "S1", "side": "right"},
    {"type": "attached", "shape": "SC3", "to": "S1", "side": "top"},
    {"type": "attached", "shape": "SC4", "to": "S1", "side": "left"}
  ],
  "positions": {
    "S1": {
      "vertices": "get_square_vertices([0, 0, 0], 3, 0)"
    },
    "SC1": {
      "center": [0, -1.5, 0],
      "radius": 1.5
    },
    "SC2": {
      "center": [1.5, 0, 0],
      "radius": 1.5
    },
    "SC3": {
      "center": [0, 1.5, 0],
      "radius": 1.5
    },
    "SC4": {
      "center": [-1.5, 0, 0],
      "radius": 1.5
    }
  }
}